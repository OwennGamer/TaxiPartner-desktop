plugins {
  id 'java'
  id 'application'
  id 'org.openjfx.javafxplugin' version '0.0.13'
  id 'org.beryx.jlink'           version '3.1.3'
}

group = 'com.partnertaxi'
version = '1.0.0'

repositories {
  mavenCentral()
}

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(17))
  }
}

application {
  mainModule = 'com.partnertaxi.taxipartneradmin'
  mainClass  = 'com.partnertaxi.taxipartneradmin.HelloApplication'
}

javafx {
  version = '20'
  modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
  // Testy
  testImplementation("org.junit.jupiter:junit-jupiter-api:5.10.2")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.10.2")
  testImplementation("org.testfx:testfx-junit5:4.0.16-alpha")
  testImplementation("org.testfx:openjfx-monocle:8u76-b04")

  // HTTP/JSON, DB
  implementation "com.squareup.okhttp3:okhttp:4.10.0"
  testImplementation "com.squareup.okhttp3:mockwebserver:4.10.0"
  implementation "com.google.code.gson:gson:2.8.9"
  implementation "mysql:mysql-connector-java:8.0.33"
  implementation "org.json:json:20230227"
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}

test { useJUnitPlatform() }

jlink {
  // Odchudzony runtime
  options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
  addExtraDependencies('javafx')

  // Nazwa EXE / wpisu w menu Start
  launcher { name = 'Partner Taxi' }

  // jpackage → MSI
  jpackage {
    imageName     = 'Partner Taxi'
    appVersion    = project.version
    installerName = 'Partner Taxi'
    installerType = 'msi'

    // Ikona instalatora (ICO)
    icon = file('src/main/resources/icons/partner-taxi.ico').absolutePath

    // W jlink 3.x używamy flag zamiast winMenu/winShortcut:
    installerOptions += [
            '--win-menu',
            '--win-shortcut',
            '--win-dir-chooser',
            '--win-menu-group', 'Partner Taxi',
            '--vendor', 'Partner Taxi',
            '--description', 'Aplikacja desktopowa Partner Taxi (JavaFX).'
    ]
  }
}
